---
groups:
  - name: bosh
    jobs:
      - gate
      - unit-2.4
      - unit-2.4-mysql
      - unit-2.4-postgres
      - unit-2.4-db-migrations-rds
      - blobstore-client-integration
      - integration-db-tls-postgres
      - integration-db-tls-postgres-hotswap
      - integration-db-tls-mysql
      - fuzz-tests
      - candidate-release
      - bats-centos
      - bats-ubuntu-xenial
      - bats-ubuntu-xenial-aws
      - brats-ubuntu-xenial
      - bbr-ubuntu-xenial
      - upgrade-tests
      - blobstore-performance
      - deploy-acceptance-env
      - delivery

  - name: mysql
    jobs:
      - unit-2.4-mysql
      - unit-2.4-db-migrations-rds

  - name: postgres
    jobs:
      - unit-2.4-postgres
      - unit-2.4-db-migrations-rds
      - integration-db-tls-postgres-hotswap

  - name: bats
    jobs:
      - bats-centos
      - bats-ubuntu-xenial
      - bats-ubuntu-xenial-aws

  - name: brats/bbr
    jobs:
      - brats-ubuntu-xenial
      - bbr-ubuntu-xenial

  # - name: version
  #   jobs:
  #     - bump-candidate-major

  - name: PM
    jobs:
      - bump-major
      - bump-minor
      - bump-patch
      - finalize-release

shared:
  - &install-dependencies
    task: install-dependencies
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: bosh/main
      inputs:
      - name: bosh-src
        path: uninstalled-bosh-src
      - name: bosh-cli
      - name: bosh-agent
      outputs:
      - name: bosh-src
      params:
        RUBY_VERSION: 2.4.4
      run:
        path: /bin/bash
        args:
        - -cex
        - |
          mv ./bosh-cli/*bosh-cli-*-linux-amd64 /usr/local/bin/bosh
          chmod +x /usr/local/bin/bosh
          source uninstalled-bosh-src/ci/tasks/utils.sh
          agent_path=uninstalled-bosh-src/src/go/src/github.com/cloudfoundry/
          mkdir -p $agent_path
          cp -r bosh-agent $agent_path
          pushd uninstalled-bosh-src/src
            source /etc/profile.d/chruby.sh
            chruby $RUBY_VERSION

            bundle install --local
            bundle exec rake spec:integration:install_dependencies
          popd
          rsync -a uninstalled-bosh-src/ bosh-src/

  - &deploy-director
    task: deploy-director
    tags: [vsphere-v6.5]
    file: bosh-src/ci/bats/tasks/deploy-director.yml
    params:
      BAT_INFRASTRUCTURE: vsphere
      BOSH_CLIENT:                          ((stemcell-test-director-username))
      BOSH_CLIENT_SECRET:                   ((stemcell-test-director-password))
      BOSH_VSPHERE_VCENTER:                 ((vcenter-ip))
      BOSH_VSPHERE_VCENTER_USER:            ((vcenter-user))
      BOSH_VSPHERE_VCENTER_PASSWORD:        ((vcenter-password))
      BOSH_VSPHERE_VERSION:                 ((vsphere-version))
      BOSH_VSPHERE_VCENTER_DC:              ((vcenter-dc))
      BOSH_VSPHERE_VCENTER_CLUSTER:         ((vcenter-cluster))
      BOSH_VSPHERE_VCENTER_DATASTORE:       ((vcenter-datastore))
      BOSH_VSPHERE_VCENTER_VLAN:            ((vcenter-vlan))
      BOSH_VSPHERE_VCENTER_VM_FOLDER:       ((vcenter-vm-folder))
      BOSH_VSPHERE_VCENTER_TEMPLATE_FOLDER: ((vcenter-template-folder))
      BOSH_VSPHERE_VCENTER_DISK_PATH:       ((vcenter-disk-path))
      BOSH_VSPHERE_VCENTER_RP:              ((vcenter-rp))
      DEPLOY_ARGS: |
        -o bosh-deployment/vsphere/resource-pool.yml \
        -o bosh-src/ci/director-with-boshua.yml \
        -v boshua_server=((boshua_server)) \
        -v stemcell_iaas=vsphere \
        -v stemcell_hypervisor=esxi

  - &prepare-bats-config
    task: prepare-bats
    tags: [vsphere-v6.5]
    file: bosh-src/ci/bats/iaas/vsphere/prepare-bats-config.yml

  - &run-bats
    task: run-bats
    tags: [vsphere-v6.5]
    file: bats/ci/tasks/run-bats.yml

  - &teardown
    task: teardown
    tags: [vsphere-v6.5]
    file: bosh-src/ci/bats/tasks/destroy-director.yml

jobs:
  - name: gate
    serial_groups:
      - blobstore-client-integration
      - blobstore-performance
      - fuzz-tests
      - integration-db-tls-mysql
      - integration-db-tls-postgres
      - integration-db-tls-postgres-hotswap
      - unit-2.4
      - unit-2.4-db-migrations-rds
      - unit-2.4-mysql
      - unit-2.4-postgres
      - upgrade-tests
    plan:
    - get: bosh-src
      trigger: true

  - name: unit-2.4
    public: true
    serial: true
    serial_groups: [unit-2.4]
    build_logs_to_retain: 250
    plan:
      - get: bosh-src
        trigger: true
        passed: [gate]

      - task: test
        timeout: 2h
        file: bosh-src/ci/tasks/test-unit.yml
        params:
          DB: sqlite

  - name: unit-2.4-mysql
    public: true
    serial: true
    serial_groups: [unit-2.4-mysql]
    build_logs_to_retain: 250
    plan:
      - aggregate:
        - get: bosh-src
          passed: [gate]
          trigger: true
        - get: bosh-main-mysql-5.5
        - get: bosh-main-mysql-5.6
        - get: bosh-main-mysql-5.7
      - aggregate:
        - task: test-mysql-5.5
          timeout: 2h
          privileged: true
          file: bosh-src/ci/tasks/test-unit.yml
          image: bosh-main-mysql-5.5
          params:
            DB: mysql
        - task: test-mysql-5.6
          timeout: 2h
          privileged: true
          file: bosh-src/ci/tasks/test-unit.yml
          image: bosh-main-mysql-5.6
          params:
            DB: mysql
        - task: test-mysql-5.7
          timeout: 2h
          privileged: true
          file: bosh-src/ci/tasks/test-unit.yml
          image: bosh-main-mysql-5.7
          params:
            DB: mysql

  - name: unit-2.4-postgres
    public: true
    serial_groups: [unit-2.4-postgres]
    serial: true
    build_logs_to_retain: 250
    plan:
      - aggregate:
        - get: bosh-src
          passed: [gate]
          trigger: true
        - get: bosh-main-postgres-9.3
        - get: bosh-main-postgres-9.4
        - get: bosh-main-postgres-9.5
        - get: bosh-main-postgres-9.6
        - get: bosh-main-postgres-10
      - aggregate:
        - task: test-postgres-9.3
          timeout: 2h
          privileged: true
          file: bosh-src/ci/tasks/test-unit.yml
          image: bosh-main-postgres-9.3
          params:
            DB: postgresql
            DB_VERSION: 9.3
        - task: test-postgres-9.4
          timeout: 2h
          privileged: true
          file: bosh-src/ci/tasks/test-unit.yml
          image: bosh-main-postgres-9.4
          params:
            DB: postgresql
            DB_VERSION: 9.4
        - task: test-postgres-9.5
          timeout: 2h
          privileged: true
          file: bosh-src/ci/tasks/test-unit.yml
          image: bosh-main-postgres-9.5
          params:
            DB: postgresql
            DB_VERSION: 9.5
        - task: test-postgres-9.6
          timeout: 2h
          privileged: true
          file: bosh-src/ci/tasks/test-unit.yml
          image: bosh-main-postgres-9.6
          params:
            DB: postgresql
            DB_VERSION: 9.6
        - task: test-postgres-10
          timeout: 2h
          privileged: true
          file: bosh-src/ci/tasks/test-unit.yml
          image: bosh-main-postgres-10
          params:
            DB: postgresql
            DB_VERSION: 10

  - name: unit-2.4-db-migrations-rds
    serial: true
    serial_groups: [unit-2.4-db-migrations-rds]
    build_logs_to_retain: 250
    plan:
      - put: rds-pool
        params: {acquire: true}
      - get: bosh-src
        passed: [gate]
        trigger: true
      - aggregate:
        - task: test-mysql-rds
          timeout: 3h
          privileged: true
          file: bosh-src/ci/tasks/test-unit-remote-db.yml
          params:
            DB: mysql
            DB_HOST: ((mysql-rds-host))
            DB_USER: ((mysql-rds-user))
            DB_PASSWORD: ((mysql-rds-password))
            AWS_ACCESS_KEY_ID: ((mysql-rds-aws-access-key-id))
            AWS_SECRET_ACCESS_KEY: ((mysql-rds-aws-secret-access-key))
            AWS_REGION: ((mysql-rds-aws-region))
            RDS_MYSQL_DB_IDENTIFIER: ((mysql-rds-db-identifier))
        - task: test-postgresql-rds
          privileged: true
          file: bosh-src/ci/tasks/test-unit-remote-db.yml
          params:
            DB: postgresql
            DB_HOST: ((postgresql-rds-host))
            DB_USER: ((postgresql-rds-user))
            DB_PASSWORD: ((postgresql-rds-password))
        ensure:
          put: rds-pool
          params: {release: rds-pool}

  - name: blobstore-client-integration
    public: true
    serial: true
    serial_groups: [blobstore-client-integration]
    build_logs_to_retain: 250
    plan:
      - get: bosh-src
        passed: [gate]
        trigger: true
      - aggregate:
        - task: test-s3
          file: bosh-src/ci/tasks/test-s3-blobstore-client-integration.yml
          params:
            access_key_id: ((blobstore_client_aws_access_key_id))
            secret_access_key: ((blobstore_client_aws_secret_access_key))
            s3_region: ((blobstore_client_aws_s3_region))
            s3_host: ((blobstore_client_aws_s3_host))
            run_aws_tests: "Not null"
        - task: test-local
          file: bosh-src/ci/tasks/test-local-blobstore-client-integration.yml
        - task: test-dav
          file: bosh-src/ci/tasks/test-dav-blobstore-client-integration.yml
        - task: test-gcs
          file: bosh-src/ci/tasks/test-gcs-blobstore-client-integration.yml
          params:
            google_project: ((blobstore_client_google_project))
            google_json_key_data: ((blobstore_client_google_json_key_data))

  - name: blobstore-performance
    public: true
    serial: true
    serial_groups: [blobstore-performance]
    build_logs_to_retain: 250
    plan:
      - get: bosh-src
        passed: [gate]
        trigger: true
      - get: davcli
        trigger: true
      - task: test
        privileged: true
        file: bosh-src/ci/tasks/test-blobstore-load.yml
        attempts: 3

  - name: integration-db-tls-postgres
    public: true
    serial: true
    serial_groups: [integration-db-tls-postgres]
    build_logs_to_retain: 250
    plan:
      - aggregate:
        - get: bosh-src
          trigger: true
          passed: [gate]
        - get: bosh-cli
          trigger: true
        - get: bosh-agent
        - get: integration-tests-parallel-runtime

      - <<: *install-dependencies

      - task: tests
        privileged: true
        file: bosh-src/ci/tasks/test-integration-gocli.yml
        tags: ["bosh-integration-1"]
        params:
          DB:           postgresql
          DB_TLS:       true

      - put: integration-tests-parallel-runtime
        params:
          file: parallel-runtime-log/parallel_runtime_rspec.log
          acl: public-read

  - name: integration-db-tls-postgres-hotswap
    public: true
    serial: true
    serial_groups: [integration-db-tls-postgres-hotswap]
    build_logs_to_retain: 250
    plan:
      - aggregate:
        - get: bosh-src
          trigger: true
          passed: [gate]
        - get: bosh-cli
          trigger: true
        - get: bosh-agent
        - get: integration-tests-parallel-runtime

      - <<: *install-dependencies

      - task: tests
        privileged: true
        file: bosh-src/ci/tasks/test-integration-gocli.yml
        tags: ["bosh-integration-2"]
        params:
          DB:           postgresql
          DEFAULT_UPDATE_VM_STRATEGY: create-swap-delete
          DB_TLS:       true

      - put: integration-tests-parallel-runtime
        params:
          file: parallel-runtime-log/parallel_runtime_rspec.log
          acl: public-read

  - name: integration-db-tls-mysql
    public: true
    serial: true
    serial_groups: [integration-db-tls-mysql]
    build_logs_to_retain: 250
    plan:
      - aggregate:
        - get: bosh-src
          passed: [gate]
          trigger: true
        - get: bosh-cli
          trigger: true
        - get: bosh-agent
        - get: bosh-main-mysql-5.7
        - get: integration-tests-parallel-runtime

      - <<: *install-dependencies

      - task: tests
        privileged: true
        tags: ["bosh-integration-3"]
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: bosh/main-mysql-5.7
          inputs:
          - name: bosh-src
          - name: bosh-cli
          - name: bosh-agent
          outputs:
          - name: parallel-runtime-log
          run:
            path: bosh-src/ci/tasks/test-integration-gocli.sh
          params:
            RUBY_VERSION: 2.4.4
            DB:           mysql
            DB_TLS:       true

      - put: integration-tests-parallel-runtime
        params:
          file: parallel-runtime-log/parallel_runtime_rspec.log
          acl: public-read

  - name: upgrade-tests
    public: true
    serial: true
    serial_groups: [upgrade-tests]
    build_logs_to_retain: 250
    plan:
      - aggregate:
        - get: bosh-src
          passed: [gate]
          trigger: true
        - get: bosh-cli
          trigger: true
        - get: bosh-agent
      - aggregate:
        - task: upgrade-with-postgres
          privileged: true
          file: bosh-src/ci/tasks/test-upgrade.yml
          tags: ["bosh-integration-4"]
          params:
            DB: postgresql

        - task: upgrade-with-mysql
          privileged: true
          file: bosh-src/ci/tasks/test-upgrade.yml
          tags: ["bosh-integration-5"]
          params:
            DB: mysql

  - name: fuzz-tests
    public: true
    serial: true
    serial_groups: [fuzz-tests]
    build_logs_to_retain: 2500
    plan:
    - { get: fuzz-interval-trigger, trigger: true }
    - get: bosh-src
      passed: [gate]
      trigger: true
    - { get: bosh-agent }
    - { get: bosh-fuzz-tests }
    - { get: bosh-cli }

    - task: test
      privileged: true
      file: bosh-fuzz-tests/ci/tasks/test.yml
      tags: ["bosh-integration-6"]
      params:
        BOSH_SRC_PATH: bosh-src/src
        RUBY_VERSION: 2.4.4

  - name: candidate-release
    plan:
    - get: bosh-src
      trigger: true
      passed:
      - unit-2.4
      - unit-2.4-mysql
      - unit-2.4-postgres
      - unit-2.4-db-migrations-rds
      - blobstore-client-integration
      - fuzz-tests
      - upgrade-tests
      - blobstore-performance
      - integration-db-tls-mysql
      - integration-db-tls-postgres
      - integration-db-tls-postgres-hotswap
    - get: bosh-cli
    - put: version
      params:
        pre: rc
    - task: make
      file: bosh-src/ci/tasks/make-candidate.yml
    - put: bosh-candidate-release-tarballs
      params:
        file: "release/bosh-dev-release.tgz"

  - name: bats-centos
    serial: true
    plan:
    - do:
      - aggregate:
        # TODO duplicate inputs
        - get: bosh-candidate-release-tarballs
          passed: [candidate-release]
        - get: bosh-release
          resource: bosh-candidate-release-tarballs
          trigger: true
          passed: [candidate-release]
        - get: cpi-release
        - get: bosh-cli
        - get: bats
        - get: bosh-deployment
        - get: bosh-src
          passed: [candidate-release]
      - put: environment
        params:
          acquire: true
      - do:
        - <<: *deploy-director
        - <<: *prepare-bats-config
          params:
            STEMCELL_NAME: bosh-vsphere-esxi-centos-7-go_agent
        - <<: *run-bats
        ensure:
          do:
            - <<: *teardown
      ensure:
        do:
        - {put: environment, params: {release: environment}}

  - name: bats-ubuntu-xenial
    serial: true
    plan:
    - do:
      - aggregate:
        - get: bosh-candidate-release-tarballs
          passed: [candidate-release]
        - get: bosh-release
          resource: bosh-candidate-release-tarballs
          trigger: true
          passed: [candidate-release]
        - get: cpi-release
        - get: stemcell
          resource: vsphere-esxi-ubuntu-xenial
        - get: bosh-cli
        - get: bats
        - get: bosh-deployment
        - get: bosh-src
          passed: [candidate-release]
      - put: environment
        params:
          acquire: true
      - do:
        - <<: *deploy-director
        - <<: *prepare-bats-config
          params:
            STEMCELL_NAME: bosh-vsphere-esxi-ubuntu-xenial-go_agent
        - <<: *run-bats
        ensure:
          do:
            - <<: *teardown
      ensure:
        do:
        - {put: environment, params: {release: environment}}

  - name: bats-ubuntu-xenial-aws
    serial: true
    plan:
    - do:
      - aggregate:
        - get: stemcell
          resource: aws-xen-hvm-ubuntu-xenial
          trigger: true
        - get: bosh-candidate-release-tarballs
          passed: [candidate-release]
        - get: bosh-release
          resource: bosh-candidate-release-tarballs
          trigger: true
          passed: [candidate-release]
        - get: bats
        - get: bosh-cli
        - get: bosh-src
          passed: [candidate-release]
        - get: bosh-deployment
      - put: terraform
        params:
          terraform_source: bosh-src/ci/bats/iaas/aws/terraform
          delete_on_failure: true
          env_name: bats-ubuntu-xenial-aws-((branch_name))
      - do:
        - task: deploy-director
          file: bosh-src/ci/bats/tasks/deploy-director.yml
          input_mapping:
            environment: terraform
          params:
            BAT_INFRASTRUCTURE: aws
            AWS_ACCESS_KEY_ID:     ((aws_access_key__primary))
            AWS_SECRET_ACCESS_KEY: ((aws_secret_key__primary))
            AWS_DEFAULT_REGION:    ((aws_region__primary))
            AWS_SSH_PRIVATE_KEY:   ((aws_ssh_private_key))
            DEPLOY_ARGS: |
              -o bosh-deployment/external-ip-with-registry-not-recommended.yml
        - task: prepare-bats-config
          file: bosh-src/ci/bats/iaas/aws/prepare-bats-config.yml
          input_mapping:
            environment: terraform
          params:
            STEMCELL_NAME: bosh-aws-xen-hvm-ubuntu-xenial-go_agent
        - task: run-bats
          file: bats/ci/tasks/run-bats.yml
        ensure:
          do:
          - task: teardown
            file: bosh-src/ci/bats/tasks/destroy-director.yml
          ensure:
            do:
            - task: ensure-terminated
              file: bosh-src/ci/bats/iaas/aws/ensure-terminated.yml
              input_mapping:
                environment: terraform
              params:
                AWS_ACCESS_KEY_ID:     ((aws_access_key__primary))
                AWS_SECRET_ACCESS_KEY: ((aws_secret_key__primary))
                AWS_DEFAULT_REGION:    ((aws_region__primary))
            - put: terraform
              params:
                terraform_source: bosh-src/ci/bats/iaas/aws/terraform
                env_name: bats-ubuntu-xenial-aws-((branch_name))
                action: destroy
              get_params:
                action: destroy

  - name: brats-ubuntu-xenial
    serial: true
    plan:
    - aggregate:
      - get: bosh-src
        passed: [candidate-release]
      - get: bosh-dns-release
      - get: stemcell
        resource: warden-ubuntu-xenial
      - get: bosh-candidate-release-tarballs
        passed: [candidate-release]
      - get: bosh-release
        resource: bosh-candidate-release-tarballs
        trigger: true
        passed: [candidate-release]
    - do:
      - put: brats-terraform
        attempts: 2
        params:
          env_name: brats-ubuntu-xenial-((branch_name))
          terraform_source: bosh-src/ci/brats
          vars:
            rds_mysql_username: ((brats-rds-mysql-external-db-user))
            rds_mysql_password: ((brats-rds-mysql-external-db-password))
            rds_mysql_databasename: ((brats-rds-mysql-external-db-name))
            rds_postgres_username: ((brats-rds-postgres-external-db-user))
            rds_postgres_password: ((brats-rds-postgres-external-db-password))
            rds_postgres_databasename: ((brats-rds-postgres-external-db-name))
            aws_access_key_id: ((bosh-ci-database-terraform-rds-aws-access-key-id))
            aws_secret_access_key: ((bosh-ci-database-terraform-rds-aws-secret-access-key))
            gcp_mysql_username: ((brats-gcp-mysql-external-db-user))
            gcp_mysql_password: ((brats-gcp-mysql-external-db-password))
            gcp_mysql_databasename: ((brats-gcp-mysql-external-db-name))
            gcp_postgres_username: ((brats-gcp-postgres-external-db-user))
            gcp_postgres_password: ((brats-gcp-postgres-external-db-password))
            gcp_postgres_databasename: ((brats-gcp-postgres-external-db-name))
          env:
            GOOGLE_CREDENTIALS: ((bosh-ci-database-terraform-google-credentials))
      - task: create-ssl-certificates
        attempts: 2
        file: bosh-src/ci/tasks/create-brats-ssl-certificates.yml
        params:
          GOOGLE_CREDENTIALS: ((bosh-ci-database-terraform-google-credentials))
        input_mapping:
          terraform-output: brats-terraform
      - task: test-brats
        file: bosh-src/ci/tasks/test-brats.yml
        input_mapping:
          database-metadata: brats-terraform
        tags: ["worker-brats"]
        privileged: true
        params: &brats-dbs-params
          RDS_MYSQL_EXTERNAL_DB_USER: ((brats-rds-mysql-external-db-user))
          RDS_MYSQL_EXTERNAL_DB_PASSWORD: ((brats-rds-mysql-external-db-password))
          RDS_MYSQL_EXTERNAL_DB_NAME: ((brats-rds-mysql-external-db-name))
          RDS_POSTGRES_EXTERNAL_DB_USER: ((brats-rds-postgres-external-db-user))
          RDS_POSTGRES_EXTERNAL_DB_PASSWORD: ((brats-rds-postgres-external-db-password))
          RDS_POSTGRES_EXTERNAL_DB_NAME: ((brats-rds-postgres-external-db-name))
          GCP_MYSQL_EXTERNAL_DB_USER: ((brats-gcp-mysql-external-db-user))
          GCP_MYSQL_EXTERNAL_DB_PASSWORD: ((brats-gcp-mysql-external-db-password))
          GCP_MYSQL_EXTERNAL_DB_NAME: ((brats-gcp-mysql-external-db-name))
          GCP_POSTGRES_EXTERNAL_DB_USER: ((brats-gcp-postgres-external-db-user))
          GCP_POSTGRES_EXTERNAL_DB_PASSWORD: ((brats-gcp-postgres-external-db-password))
          GCP_POSTGRES_EXTERNAL_DB_NAME: ((brats-gcp-postgres-external-db-name))
          STEMCELL_OS: ubuntu-xenial
      ensure:
        do:
        - task: cleanup-external-dbs
          file: bosh-src/ci/tasks/test-brats-db-cleanup.yml
          input_mapping:
            database-metadata: brats-terraform
          params: *brats-dbs-params
        - put: brats-terraform
          get_params: { action: destroy }
          params:
            env_name: brats-ubuntu-xenial-((branch_name))
            terraform_source: bosh-src/ci/brats
            action: destroy
            vars:
              rds_mysql_username: ((brats-rds-mysql-external-db-user))
              rds_mysql_password: ((brats-rds-mysql-external-db-password))
              rds_mysql_databasename: ((brats-rds-mysql-external-db-name))
              rds_postgres_username: ((brats-rds-postgres-external-db-user))
              rds_postgres_password: ((brats-rds-postgres-external-db-password))
              rds_postgres_databasename: ((brats-rds-postgres-external-db-name))
              aws_access_key_id: ((bosh-ci-database-terraform-rds-aws-access-key-id))
              aws_secret_access_key: ((bosh-ci-database-terraform-rds-aws-secret-access-key))
              gcp_mysql_username: ((brats-gcp-mysql-external-db-user))
              gcp_mysql_password: ((brats-gcp-mysql-external-db-password))
              gcp_mysql_databasename: ((brats-gcp-mysql-external-db-name))
              gcp_postgres_username: ((brats-gcp-postgres-external-db-user))
              gcp_postgres_password: ((brats-gcp-postgres-external-db-password))
              gcp_postgres_databasename: ((brats-gcp-postgres-external-db-name))
            env:
              GOOGLE_CREDENTIALS: ((bosh-ci-database-terraform-google-credentials))

  - name: bbr-ubuntu-xenial
    serial: true
    plan:
    - aggregate:
      - get: bosh-src
        passed: [candidate-release]
      - get: stemcell
        resource: warden-ubuntu-xenial
      - get: bosh-candidate-release-tarballs
        passed: [candidate-release]
      - get: bosh-release
        resource: bosh-candidate-release-tarballs
        trigger: true
        passed: [candidate-release]
      - get: bbr-sdk-release
    - do:
      - put: brats-terraform
        attempts: 2
        params:
          env_name: bbr-ubuntu-xenial-((branch_name))
          terraform_source: bosh-src/ci/brats
          vars:
            rds_mysql_username: ((brats-rds-mysql-external-db-user))
            rds_mysql_password: ((brats-rds-mysql-external-db-password))
            rds_mysql_databasename: ((brats-rds-mysql-external-db-name))
            rds_postgres_username: ((brats-rds-postgres-external-db-user))
            rds_postgres_password: ((brats-rds-postgres-external-db-password))
            rds_postgres_databasename: ((brats-rds-postgres-external-db-name))
            aws_access_key_id: ((bosh-ci-database-terraform-rds-aws-access-key-id))
            aws_secret_access_key: ((bosh-ci-database-terraform-rds-aws-secret-access-key))
            gcp_mysql_username: ((brats-gcp-mysql-external-db-user))
            gcp_mysql_password: ((brats-gcp-mysql-external-db-password))
            gcp_mysql_databasename: ((brats-gcp-mysql-external-db-name))
            gcp_postgres_username: ((brats-gcp-postgres-external-db-user))
            gcp_postgres_password: ((brats-gcp-postgres-external-db-password))
            gcp_postgres_databasename: ((brats-gcp-postgres-external-db-name))
          env:
            GOOGLE_CREDENTIALS: ((bosh-ci-database-terraform-google-credentials))
      - task: create-ssl-certificates
        file: bosh-src/ci/tasks/create-brats-ssl-certificates.yml
        attempts: 2
        params:
          GOOGLE_CREDENTIALS: ((bosh-ci-database-terraform-google-credentials))
        input_mapping:
          terraform-output: brats-terraform
      - task: test-bbr
        file: bosh-src/ci/tasks/test-bbr.yml
        tags: ["worker-brats"]
        input_mapping:
          database-metadata: brats-terraform
        privileged: true
        params: &brats-dbs-params
          RDS_MYSQL_EXTERNAL_DB_USER: ((brats-rds-mysql-external-db-user))
          RDS_MYSQL_EXTERNAL_DB_PASSWORD: ((brats-rds-mysql-external-db-password))
          RDS_MYSQL_EXTERNAL_DB_NAME: ((brats-rds-mysql-external-db-name))
          RDS_POSTGRES_EXTERNAL_DB_USER: ((brats-rds-postgres-external-db-user))
          RDS_POSTGRES_EXTERNAL_DB_PASSWORD: ((brats-rds-postgres-external-db-password))
          RDS_POSTGRES_EXTERNAL_DB_NAME: ((brats-rds-postgres-external-db-name))
          GCP_MYSQL_EXTERNAL_DB_USER: ((brats-gcp-mysql-external-db-user))
          GCP_MYSQL_EXTERNAL_DB_PASSWORD: ((brats-gcp-mysql-external-db-password))
          GCP_MYSQL_EXTERNAL_DB_NAME: ((brats-gcp-mysql-external-db-name))
          GCP_POSTGRES_EXTERNAL_DB_USER: ((brats-gcp-postgres-external-db-user))
          GCP_POSTGRES_EXTERNAL_DB_PASSWORD: ((brats-gcp-postgres-external-db-password))
          GCP_POSTGRES_EXTERNAL_DB_NAME: ((brats-gcp-postgres-external-db-name))
          STEMCELL_OS: ubuntu-xenial
      ensure:
        do:
        - task: cleanup-external-dbs
          file: bosh-src/ci/tasks/test-brats-db-cleanup.yml
          input_mapping:
            database-metadata: brats-terraform
          params: *brats-dbs-params
        - put: brats-terraform
          get_params: { action: destroy }
          params:
            env_name: bbr-ubuntu-xenial-((branch_name))
            terraform_source: bosh-src/ci/brats
            action: destroy
            vars:
              rds_mysql_username: ((brats-rds-mysql-external-db-user))
              rds_mysql_password: ((brats-rds-mysql-external-db-password))
              rds_mysql_databasename: ((brats-rds-mysql-external-db-name))
              rds_postgres_username: ((brats-rds-postgres-external-db-user))
              rds_postgres_password: ((brats-rds-postgres-external-db-password))
              rds_postgres_databasename: ((brats-rds-postgres-external-db-name))
              aws_access_key_id: ((bosh-ci-database-terraform-rds-aws-access-key-id))
              aws_secret_access_key: ((bosh-ci-database-terraform-rds-aws-secret-access-key))
              gcp_mysql_username: ((brats-gcp-mysql-external-db-user))
              gcp_mysql_password: ((brats-gcp-mysql-external-db-password))
              gcp_mysql_databasename: ((brats-gcp-mysql-external-db-name))
              gcp_postgres_username: ((brats-gcp-postgres-external-db-user))
              gcp_postgres_password: ((brats-gcp-postgres-external-db-password))
              gcp_postgres_databasename: ((brats-gcp-postgres-external-db-name))
            env:
              GOOGLE_CREDENTIALS: ((bosh-ci-database-terraform-google-credentials))

  - name: deploy-acceptance-env
    serial: true
    plan:
      - aggregate:
        - get: bbl-state
          resource: acceptance-env-state
        - get: zookeeper-release
        - get: bosh-deployment
        - get: stemcell
          resource: google-kvm-ubuntu-xenial
        - get: bosh-src
          passed:
          - bats-ubuntu-xenial
          - bats-centos
          - brats-ubuntu-xenial
          - bbr-ubuntu-xenial
        - get: candidate-release
          resource: bosh-candidate-release-tarballs
          trigger: true
          passed:
          - bats-ubuntu-xenial
          - bats-centos
          - brats-ubuntu-xenial
          - bbr-ubuntu-xenial
      - task: deploy-env
        file: bosh-src/ci/tasks/setup-env.yml
        params:
          BBL_GCP_SERVICE_ACCOUNT_KEY: ((acceptance_gcp_service_account_key))
          BBL_GCP_REGION: us-west2
          BBL_IAAS: gcp
        ensure:
          put: acceptance-env-state
          params:
            repository: updated-bbl-state
            rebase: true

  - name: delivery
    plan:
      - aggregate:
        - get: bosh-src
          version: every
          trigger: true
          passed:
          - bats-ubuntu-xenial
          - bats-centos
          - brats-ubuntu-xenial
          - bbr-ubuntu-xenial
      - put: tracker-output
        params:
          repos:
          - bosh-src

  - name: finalize-release
    serial: true
    plan:
      - aggregate:
        - get: bosh-src
          passed: [deploy-acceptance-env]
        - get: bosh-src-latest
          resource: bosh-src
        - get: bosh-cli
        - get: version
          params:
            bump: final
      - task: prepare-release
        file: bosh-src/ci/tasks/prepare-release.yml
      - put: bosh-src
        params:
          repository: bosh-src-latest-with-release-commit
          rebase: true
      - get: bosh-master
      - task: finalize-release
        file: bosh-src-latest-with-release-commit/ci/tasks/finalize-bosh-release.yml
        params:
          BLOBSTORE_ACCESS_KEY_ID: ((bosh_release_access_key_id))
          BLOBSTORE_SECRET_ACCESS_KEY: ((bosh_release_secret_access_key))
      - put: bosh-master
        params:
          repository: bosh-master-with-final
          tag: bosh-master-with-final/tag-name
          annotate: bosh-master-with-final/annotate-msg
          rebase: true
      - put: bosh-github-release
        params:
          name: bosh-master-with-final/tag-name
          tag: bosh-master-with-final/tag-name
      - put: version
        params:
          file: version/version

  - name: bump-major
    serial: true
    plan:
    - get: version
      params:
        bump: major
    - put: version
      params:
        file: version/version

  - name: bump-minor
    serial: true
    plan:
    - get: version
      params:
        bump: minor
    - put: version
      params:
        file: version/version

  - name: bump-patch
    serial: true
    plan:
    - get: version
      params:
        bump: patch
    - put: version
      params:
        file: version/version

resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource

- name: gcs-resource
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:
  - name: bosh-src
    type: git
    source:
      uri: ((bosh_src_url))
      branch: ((branch_name))
      private_key: ((github_deployment_key))

  - name: bosh-github-release
    type: github-release
    source:
      owner: cloudfoundry
      repository: bosh
      drafts: true
      access_token: ((github_token))

  - name: version
    type: semver
    source:
      bucket: ((candidate_release_bucket))
      key: version
      access_key_id: ((candidate_release_access_key_id))
      secret_access_key: ((candidate_release_secret_access_key))

  - name: bosh-candidate-release-tarballs
    type: s3
    source:
      bucket: ((candidate_release_bucket))
      access_key_id: ((candidate_release_access_key_id))
      secret_access_key: ((candidate_release_secret_access_key))
      versioned_file: "bosh-dev-release.tgz"

  - name: bbr-sdk-release
    type: bosh-io-release
    source:
      repository:  cloudfoundry-incubator/backup-and-restore-sdk-release

  - name: integration-tests-parallel-runtime
    type: s3
    source:
      bucket: ((integration_runtime_bucket))
      access_key_id: ((integration_runtime_access_key_id))
      secret_access_key: ((integration_runtime_secret_access_key))
      versioned_file: "parallel_runtime_rspec.log"

  - name: brats-terraform
    type: terraform
    source:
      storage:
        bucket: bosh-ci-terraform
        bucket_path: brats-ci/
        region_name: us-west-1
        access_key_id: ((bosh-ci-database-terraform-aws-access-key-id))
        secret_access_key: ((bosh-ci-database-terraform-aws-secret-access-key))

  - name: acceptance-env-state
    type: git
    source:
      branch: master
      uri: git@github.com:cloudfoundry/bosh-bbl-ci-envs.git
      private_key: ((bosh-bbl-ci-envs-private-key))

  - name: zookeeper-release
    type: git
    source:
      uri: https://github.com/cppforlife/zookeeper-release
      branch: master

  - name: davcli
    type: s3
    source:
      regexp: davcli-(.*)-linux-amd64
      bucket: davcli
      region_name: us-east-1

  - name: bosh-fuzz-tests
    type: git
    source:
      uri: https://github.com/cloudfoundry-incubator/bosh-fuzz-tests.git
      branch: master

  - name: bosh-master
    type: git
    source:
      uri: ((bosh_src_url))
      branch: master
      private_key: ((github_deployment_key))

  - name: fuzz-interval-trigger
    type: time
    source:
      interval: 15m

  - name: bosh-cli
    type: s3
    source:
      regexp: alpha-bosh-cli-(.*)-linux-amd64
      bucket: ((bosh_cli_aws_s3_alpha_release_bucket))
      region_name: ((bosh_cli_aws_s3_release_bucket_region))

  - name: bosh-dns-release
    type: bosh-io-release
    source:
      repository: cloudfoundry/bosh-dns-release

  #
  # BATS
  #

  - name: bats
    type: git
    source:
      uri: https://github.com/cloudfoundry/bosh-acceptance-tests.git
      branch: master

  - name: bosh-deployment
    type: git
    source:
      uri: https://github.com/cloudfoundry/bosh-deployment
      branch: master

  - name: environment
    type: pool
    source:
      pool: vsphere
      uri: git@github.com:pivotal-cf-experimental/bats-concourse-pool.git
      branch: master
      private_key: ((github_deployment_key__bosh-cpi-environments))

  - name: vsphere-esxi-ubuntu-xenial
    type: bosh-io-stemcell
    source:
      name: bosh-vsphere-esxi-ubuntu-xenial-go_agent

  - name: google-kvm-ubuntu-xenial
    type: bosh-io-stemcell
    source:
      name: bosh-google-kvm-ubuntu-xenial-go_agent

  - name: aws-xen-hvm-ubuntu-xenial
    type: bosh-io-stemcell
    source:
      name: bosh-aws-xen-hvm-ubuntu-xenial-go_agent

  - name: warden-ubuntu-xenial
    type: bosh-io-stemcell
    source:
      name: bosh-warden-boshlite-ubuntu-xenial-go_agent

  - name: cpi-release
    type: bosh-io-release
    source:
      repository: cloudfoundry-incubator/bosh-vsphere-cpi-release

  - name: bosh-agent
    type: git
    source:
      uri: https://github.com/cloudfoundry/bosh-agent
      branch: master

  - name: tracker-output
    type: tracker
    source:
      token: ((tracker_api_token))
      project_id: ((tracker_project_id))
      tracker_url: https://www.pivotaltracker.com

  - name: bosh-main-mysql-5.5
    type: docker-image
    source:
      repository: bosh/main-mysql-5.5

  - name: bosh-main-mysql-5.6
    type: docker-image
    source:
      repository: bosh/main-mysql-5.6

  - name: bosh-main-mysql-5.7
    type: docker-image
    source:
      repository: bosh/main-mysql-5.7

  - name: bosh-main-postgres-9.3
    type: docker-image
    source:
      repository: bosh/main-postgres-9.3

  - name: bosh-main-postgres-9.4
    type: docker-image
    source:
      repository: bosh/main-postgres-9.4

  - name: bosh-main-postgres-9.5
    type: docker-image
    source:
      repository: bosh/main-postgres-9.5

  - name: bosh-main-postgres-9.6
    type: docker-image
    source:
      repository: bosh/main-postgres-9.6

  - name: bosh-main-postgres-10
    type: docker-image
    source:
      repository: bosh/main-postgres-10

  - name: rds-pool
    type: pool
    source:
      uri: git@github.com:cloudfoundry/bosh-ci-pools
      branch: master
      pool: unit-24-db-migrations-rds
      private_key: ((bosh_ci_pools_deploy_key))

  - name: terraform
    type: terraform
    source:
      storage:
        access_key_id:     ((aws_access_key__primary))
        secret_access_key: ((aws_secret_key__primary))
        bucket:            ((terraform_bucket))
        bucket_path:       terraform-state
      vars:
        access_key: ((aws_access_key__primary))
        secret_key: ((aws_secret_key__primary))
        region:     ((aws_region__primary))
        ssh_public_key: ((aws_ssh_public_key))
